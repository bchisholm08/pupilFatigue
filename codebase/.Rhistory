purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/resampleSignal.Rmd",
output = "resampleSignal.R")
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/resampleSignal.Rmd",
output = "resampleSignal.R")
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
# Chunk 2
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
# Chunk 3
subjList <- getRData(1)
getRData <- function(data) {
# data = 1 for original experiment
if (data == 1 ){
# libraries
library(R.matlab)   # To read .mat data files
library(mgcv)       # For GAMM analysis
library(knitr)      # purl(); source .Rmd code for callings functions
# M:\Lab_Shared\Brady_C\Projects\pupilEEG_fatigue\statistics\scripts
# get subjID function
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getSubjID_RV.Rmd", output = "getSubjID_RV.R")
source("getSubjID_RV.R")
subjIDS <- getSubjList(1)
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/resampleSignal.Rmd",
output = "resampleSignal.R")
source("resampleSignal.R")
# Base data directory
base_dir <- "M:/Lab_Shared/Juraj/SpeechEEG_SentencesWithPupillometry/data"
# store downsampled data
downSampleDirectory <- "M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/downSampledData"
# try to preallocate space for data frame for effeciency
subject_data <- vector("list", length(subjIDS))
names(subject_data) <- subjIDS
# prep bookkeeping table for eye data used
eyeUsed_Data <- data.frame(
subject = subjIDS,
eyeUsed = rep(NA, length(subjIDS)),
stringsAsFactors = FALSE
)
## begin subj loop
for (subj in subjIDS) {
# construct file path for this subj .
file_path <- file.path(base_dir, subj, "eyeTrack", "processed", paste0(subj, "_preprocPupilData.mat"))
# existence check
if (!file.exists(file_path)) {
warning("File does not exist for subject: ", subj)
next # control flow
}
# get .mat data file.
# TIME HEAVY LINE
mat_data <- readMat(file_path)
if ("condOrder" %in% names(mat_data)) {
condOrder <- mat_data$condOrder
} else {
warning(subj, ": 'condOrder' not found in .mat file.")
stop() # fatal error; stop
}
# existence check
if (!"allDat" %in% names(mat_data)) {
warning(subj, ": 'allDat' not found in the .mat file.")
stop()
next
}
# Extract "allDat" (exp [200 x 2 x 6000])
allDat <- mat_data$allDat
#NaN mean avg for selecting better eye
validityVals <- colMeans(mat_data$allValidityPercentage, na.rm = TRUE)
# opt to better eye
if(validityVals[1] > validityVals[2]){
pupilData <- allDat[,1,]
eyeUsed <- "Left"
}else{
pupilData <- allDat[,2,]
eyeUsed <- "Right"
}
eyeUsed_Data[eyeUsed_Data$subject == subj, "eyeUsed"] <- eyeUsed
# after we have better eye, downsample data for space
# x = a matrix or df of predictors; y = a factor variable with class memberships; list is boolean; yname = ""
# Downsample data from 300Hz to 150Hz.
# This is done by averaging every 2 consecutive time points.
pupilData_down <- t(resample_signal(t(pupilData), p = 1, q = 2))
# Verify the dimensions: Should be 200 x 3000 after downsampling.
if (!all(dim(pupilData_down) == c(200, 3000))) {
warning("Subject ", subj, ": downsampled data dims != [200 x 3000]")
}
# Replace the original pupilData with the downsampled version.
pupilData <- pupilData_down
# Check dimensions of "allDat". Note; use resamp input for checking dims here
if (is.null(mat_data$condOrder) || any(is.na(mat_data$condOrder))) {
warning("Subject ", subj, ": condOrder not found or contains NA/NaN values.")
stop()
} else {
condOrder <- mat_data$condOrder
}
subject_data[[subj]] <- list(pupilData = pupilData, condOrder = condOrder)
subjectFolder <- file.path(downSampDir, subj)
if (!dir.exists(subjectFolder)) {
dir.create(subjectFolder, recursive = TRUE)
}
today_str <- format(Sys.Date(), "%Y%m%d")
fileName <- file.path(subjectFolder, paste0("downsampled_", today_str, "_150Hz.rds"))
saveRDS(pupilData, file = fileName)
message("Saved downsampled data for subject ", subj, " at ", fileName)
}
# Save the eyeUsed_Data to the misc directory.
eyeUsedFile <- file.path(miscDir, paste0("eyeUsed_Data_", format(Sys.Date(), "%Y%m%d"), ".csv"))
write.csv(eyeUsed_Data, eyeUsedFile, row.names = FALSE)
message("Saved eyeUsed data at ", eyeUsedFile)
# Print dimensions of downsampled subject data
for (subj in names(subject_data)) {
dims <- paste(dim(subject_data[[subj]]$pupilData), collapse = " x ")
message("Subject: ", subj, " - Downsampled data dimensions: ", dims)
}
# Return list with pupil data and condition order.
return(subject_data)
} else {
stop("Data value not recognized. Please provide a valid data input.")
}
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
# Chunk 2
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getData_RV.Rmd",
output = "getData_RV.R")
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getData_RV.Rmd",
output = "getData_RV.R")
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getData_RV.Rmd",
output = "getData_RV.R")
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getData_RV.Rmd",
output = "getData_RV.R")
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjList <- getRData(1)
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjList <- getRData(1)
getRData <- function(data) {
# data = 1 for original experiment
if (data == 1 ){
# libraries
library(R.matlab)   # To read .mat data files
library(mgcv)       # For GAMM analysis
library(knitr)      # purl(); source .Rmd code for callings functions
# M:\Lab_Shared\Brady_C\Projects\pupilEEG_fatigue\statistics\scripts
# get subjID function
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getSubjID_RV.Rmd",
output = "getSubjID_RV.R")
source("getSubjID_RV.R")
subjIDS <- getSubjList(1)
# get resample function
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/resampleSignal.Rmd",
output = "resampleSignal.R")
source("resampleSignal.R")
# Base data directory
base_dir <- "M:/Lab_Shared/Juraj/SpeechEEG_SentencesWithPupillometry/data"
# store downsampled data
downSampleDirectory <- "M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/downSampledData"
# try to preallocate space for data frame for effeciency
subject_data <- vector("list", length(subjIDS))
names(subject_data) <- subjIDS
# prep bookkeeping table for eye data used
eyeUsed_Data <- data.frame(
subject = subjIDS,
eyeUsed = rep(NA, length(subjIDS)),
stringsAsFactors = FALSE
)
## begin subj loop
for (subj in subjIDS) {
# construct file path for this subj .
file_path <- file.path(base_dir, subj, "eyeTrack", "processed", paste0(subj, "_preprocPupilData.mat"))
# existence check
if (!file.exists(file_path)) {
warning("File does not exist for subject: ", subj)
next # control flow
}
# get .mat data file.
# TIME HEAVY LINE
mat_data <- readMat(file_path)
if ("condOrder" %in% names(mat_data)) {
condOrder <- mat_data$condOrder
} else {
warning(subj, ": 'condOrder' not found in .mat file.")
stop() # fatal error; stop
}
# existence check
if (!"allDat" %in% names(mat_data)) {
warning(subj, ": 'allDat' not found in the .mat file.")
stop()
next
}
# Extract "allDat" (exp [200 x 2 x 6000])
allDat <- mat_data$allDat
#NaN mean avg for selecting better eye
validityVals <- colMeans(mat_data$allValidityPercentage, na.rm = TRUE)
# opt to better eye
if(validityVals[1] > validityVals[2]){
pupilData <- allDat[,1,]
eyeUsed <- "Left"
}else{
pupilData <- allDat[,2,]
eyeUsed <- "Right"
}
eyeUsed_Data[eyeUsed_Data$subject == subj, "eyeUsed"] <- eyeUsed
# after we have better eye, downsample data for space
# x = a matrix or df of predictors; y = a factor variable with class memberships; list is boolean; yname = ""
# Downsample data from 300Hz to 150Hz.
# This is done by averaging every 2 consecutive time points.
pupilData_down <- t(resample_signal(t(pupilData), p = 1, q = 2))
# Verify the dimensions: Should be 200 x 3000 after downsampling.
if (!all(dim(pupilData_down) == c(200, 3000))) {
warning("Subject ", subj, ": downsampled data dims != [200 x 3000]")
}
# Replace the original pupilData with the downsampled version.
pupilData <- pupilData_down
# Check dimensions of "allDat". Note; use resamp input for checking dims here
if (is.null(mat_data$condOrder) || any(is.na(mat_data$condOrder))) {
warning("Subject ", subj, ": condOrder not found or contains NA/NaN values.")
stop()
} else {
condOrder <- mat_data$condOrder
}
subject_data[[subj]] <- list(pupilData = pupilData, condOrder = condOrder)
subjectFolder <- file.path(downSampDir, subj)
if (!dir.exists(subjectFolder)) {
dir.create(subjectFolder, recursive = TRUE)
}
today_str <- format(Sys.Date(), "%Y%m%d")
fileName <- file.path(subjectFolder, paste0("downsampled_", today_str, "_150Hz.rds"))
saveRDS(pupilData, file = fileName)
message("Saved downsampled data for subject ", subj, " at ", fileName)
}
# Save the eyeUsed_Data to the misc directory.
eyeUsedFile <- file.path(miscDir, paste0("eyeUsed_Data_", format(Sys.Date(), "%Y%m%d"), ".csv"))
write.csv(eyeUsed_Data, eyeUsedFile, row.names = FALSE)
message("Saved eyeUsed data at ", eyeUsedFile)
# Print dimensions of downsampled subject data
for (subj in names(subject_data)) {
dims <- paste(dim(subject_data[[subj]]$pupilData), collapse = " x ")
message("Subject: ", subj, " - Downsampled data dimensions: ", dims)
}
# Return list with pupil data and condition order.
return(subject_data)
} else {
stop("Data value not recognized. Please provide a valid data input.")
}
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjList <- getRData(1)
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
# Chunk 2
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
all_subjects_data <- lapply(names(subjList), function(subj) {
# Extract pupil data
subjPupilData <- subjList[[subj]]$pupilData  # dimensions: 200 x 6000
n_trials <- nrow(subjPupilData)
n_timepoints <- ncol(subjPupilData)
# Convert matrix to a data frame with trial as row identifier.
# The columns will be automatically named V1, V2, ..., V6000.
df <- as.data.frame(subjPupilData)
df$trial <- 1:n_trials
# reshape data
tidy_df <- pivot_longer(df, cols = starts_with("v"),
names_to = "time", values_to = "pupil")
# Convert time var from "V1", "V2", ... to numeric
tidy_df$time <- as.numeric(sub("V", "", tidy_df$time))
# If condOrder exists and is a vector of length equal to number of trials,
# then replicate its values for each time point per trial.
# remember to recode condORder variable!!!!!
condOrder <- subjList[[subj]]$condOrder
if (!is.null(condOrder) && length(condOrder) == n_trials) {
tidy_df$condOrder <- rep(condOrder, each = n_timepoints)
} else {
tidy_df$condOrder <- NA
}
# Add subj id
tidy_df$subject <- subj
return(tidy_df)
})
subjList <- getRData(1)
getwd()
setwd("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts")
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjList <- getRData(1)
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjList <- getRData(1)
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjList <- getRData(1)
getRData <- function(data) {
# data = 1 for original experiment
if (data == 1 ){
# libraries
library(R.matlab)   # To read .mat data files
library(mgcv)       # For GAMM analysis
library(knitr)      # purl(); source .Rmd code for callings functions
# M:\Lab_Shared\Brady_C\Projects\pupilEEG_fatigue\statistics\scripts
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjIDS <- getSubjList(1)
# get resample function
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/resampleSignal.Rmd",
output = "resampleSignal.R")
source("resampleSignal.R")
# Base data directory
base_dir <- "M:/Lab_Shared/Juraj/SpeechEEG_SentencesWithPupillometry/data"
# store downsampled data
downSampleDirectory <- "M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/downSampledData"
# try to preallocate space for data frame for effeciency
subject_data <- vector("list", length(subjIDS))
names(subject_data) <- subjIDS
# prep bookkeeping table for eye data used
eyeUsed_Data <- data.frame(
subject = subjIDS,
eyeUsed = rep(NA, length(subjIDS)),
stringsAsFactors = FALSE
)
## begin subj loop
for (subj in subjIDS) {
# construct file path for this subj .
file_path <- file.path(base_dir, subj, "eyeTrack", "processed", paste0(subj, "_preprocPupilData.mat"))
# existence check
if (!file.exists(file_path)) {
warning("File does not exist for subject: ", subj)
next # control flow
}
# get .mat data file.
# TIME HEAVY LINE !!!!
mat_data <- readMat(file_path)
if ("condOrder" %in% names(mat_data)) {
condOrder <- mat_data$condOrder
} else {
warning(subj, ": 'condOrder' not found in .mat file.")
stop() # fatal error; stop
}
# existence check
if (!"allDat" %in% names(mat_data)) {
warning(subj, ": 'allDat' not found in the .mat file.")
stop()
next
}
# Extract "allDat" (exp [200 x 2 x 6000])
allDat <- mat_data$allDat
#NaN mean avg for selecting better eye
validityVals <- colMeans(mat_data$allValidityPercentage, na.rm = TRUE)
# opt to better eye
if(validityVals[1] > validityVals[2]){
pupilData <- allDat[,1,]
eyeUsed <- "Left"
}else{
pupilData <- allDat[,2,]
eyeUsed <- "Right"
}
eyeUsed_Data[eyeUsed_Data$subject == subj, "eyeUsed"] <- eyeUsed
# after we have better eye, downsample data for space
# x = a matrix or df of predictors; y = a factor variable with class memberships; list is boolean; yname = ""
# Downsample data from 300Hz to 150Hz.
# This is done by averaging every 2 consecutive time points.
pupilData_down <- t(resample_signal(t(pupilData), p = 1, q = 2))
# Verify the dimensions: Should be 200 x 3000 after downsampling.
if (!all(dim(pupilData_down) == c(200, 3000))) {
warning("Subject ", subj, ": downsampled data dims != [200 x 3000]")
}
# Replace the original pupilData with the downsampled version.
pupilData <- pupilData_down
# Check dimensions of "allDat". Note; use resamp input for checking dims here
if (is.null(mat_data$condOrder) || any(is.na(mat_data$condOrder))) {
warning("Subject ", subj, ": condOrder not found or contains NA/NaN values.")
stop()
} else {
condOrder <- mat_data$condOrder
}
subject_data[[subj]] <- list(pupilData = pupilData, condOrder = condOrder)
subjectFolder <- file.path(downSampDir, subj)
if (!dir.exists(subjectFolder)) {
dir.create(subjectFolder, recursive = TRUE)
}
today_str <- format(Sys.Date(), "%Y%m%d")
fileName <- file.path(subjectFolder, paste0("downsampled_", today_str, "_150Hz.rds"))
saveRDS(pupilData, file = fileName)
message("Saved downsampled data for subject ", subj, " at ", fileName)
}
# Save the eyeUsed_Data to the misc directory.
eyeUsedFile <- file.path(miscDir, paste0("eyeUsed_Data_", format(Sys.Date(), "%Y%m%d"), ".csv"))
write.csv(eyeUsed_Data, eyeUsedFile, row.names = FALSE)
message("Saved eyeUsed data at ", eyeUsedFile)
# Print dimensions of downsampled subject data
for (subj in names(subject_data)) {
dims <- paste(dim(subject_data[[subj]]$pupilData), collapse = " x ")
message("Subject: ", subj, " - Downsampled data dimensions: ", dims)
}
# Return list with pupil data and condition order.
return(subject_data)
} else {
stop("Data value not recognized. Please provide a valid data input.")
}
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjList <- getRData(1)
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjList <- getRData(1)
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
subjList <- getRData(1)
# get resample and subj id w/ functions
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/resampleSignal.Rmd",
output = "resampleSignal.R")
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/scripts/getData_RV.Rmd",
output = "getData_RV.R")
source("getData_RV.R")
subjList <- getRData(1)
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getSubjID_RV.Rmd", output = "getSubjID_RV.R")
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getSubjID_RV.Rmd", output = "getSubjID_RV.R")
# Chunk 1
library(knitr)      # purl(); source .Rmd code for callings functions
library(mgcv)       # gamm mods
library(dplyr)      # data manipulations & formatting
library(tidyr)      # data manipulations & formatting
library(ggplot2)    # figures
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getData_RV.Rmd",
output = "getData_RV.R")
purl("M:/Lab_Shared/Brady_C/Projects/pupilEEG_fatigue/statistics/scripts/getData_RV.Rmd",
output = "getData_RV.R")
